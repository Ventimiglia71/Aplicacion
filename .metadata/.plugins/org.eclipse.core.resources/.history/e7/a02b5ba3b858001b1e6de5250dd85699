package com.cice.aulas.controllers;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.cice.aulas.entities.Aula;
import com.cice.aulas.entities.Mes;
import com.cice.aulas.entities.Reserva;
import com.cice.aulas.entities.Sede;
import com.cice.aulas.service.IAulasService;
import com.cice.aulas.service.IReservasService;
import com.cice.aulas.service.ISedesService;
import com.cice.aulas.service.ITipordService;

@Secured("ROLE_USER")
@Controller
public class reservasController {
	@Autowired
	ISedesService sedesService;
	@Autowired
	IAulasService aulasService;
	@Autowired
	IReservasService reservasService;
	@Autowired
	ITipordService tipordService;
	
	@GetMapping("/preReservaUnitaria")
	public ModelAndView preReservaUnitaria(	@RequestParam("modo") String modo,
											@RequestParam("mensaje") String mensaje,
											@RequestParam("sedeSelec") int sedeSelec) {
		//Recuperamos todas las sedes para alimentar el combo para elegirlas
		List<Sede> sedes = sedesService.allSedes();

		int codSede = 0;

		if (sedeSelec < 0) {
			codSede = sedes.get(0).getCod_sede();
		} else {
			codSede = sedeSelec;
		}

		//Obtenemos todas las aulas de la primera sede de la BBDD
		List<Aula> aulas = aulasService.aulasPorSede(codSede); 
		int codAula = aulas.get(0).getCod_aula();
		
		ModelAndView mav = new ModelAndView();

		mav.addObject("sedes", sedes);
		mav.addObject("codSede", codSede);
		mav.addObject("aulas", aulas);
		mav.addObject("codAula", codAula);
		mav.addObject("modo", modo);
		mav.addObject("mensaje", mensaje);


		mav.setViewName("preReservaUnitaria");
		return mav;
	}

	@RequestMapping(value = "/reservaUnitaria", method = RequestMethod.GET)
	public String reservaUnitaria(
			@RequestParam("sedeSelec") int sedeSelec,
			@RequestParam("codAulaSelec") int codAulaSelec,
			@RequestParam("fechaDesde") @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate fechaDesde,
			@RequestParam("fechaHasta") @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate fechaHasta,
			@RequestParam("horaDesde") int horaDesde,
			@RequestParam("horaHasta") int horaHasta) {
		//Preparamos variables de trabajo
		String mensaje = "";
		String fechaDesdeTexto = fechaDesde.toString();
		String fechaHastaTexto = fechaHasta.toString();
		if(fechaHastaTexto.contains("9999-12-31")) {
			fechaHastaTexto = fechaDesdeTexto;
		}
		int anyoDesde	= Integer.parseInt(fechaDesdeTexto.substring(0, 4));
		int mesDesde	= Integer.parseInt(fechaDesdeTexto.substring(5,7));
		int diaDesde	= Integer.parseInt(fechaDesdeTexto.substring(8));
		int anyoHasta	= Integer.parseInt(fechaHastaTexto.substring(0, 4));
		int mesHasta	= Integer.parseInt(fechaHastaTexto.substring(5,7));
		int diaHasta	= Integer.parseInt(fechaHastaTexto.substring(8));
		
		if (anyoHasta 	< 	anyoDesde 		||
			(anyoHasta 	==  anyoDesde &&
			 mesHasta 	<	mesDesde	) 	||
			(anyoHasta 	==  anyoDesde &&
			 mesHasta 	==	mesDesde  &&
			 diaHasta	<	diaDesde)		||
			 horaHasta 	<	horaDesde		) {
			mensaje = "La fecha/hora hasta debe ser mayor o igual que la fecha/hora desde, nunca menor";
			if(fechaDesdeTexto.contains(fechaHastaTexto)) {
				return "redirect:/preReservaUnitaria?modo=0&mensaje=" + mensaje + "&sedeSelec=" + sedeSelec;
			} else {
				return "redirect:/preReservaUnitaria?modo=3&mensaje=" + mensaje + "&sedeSelec=" + sedeSelec;
			}
		}

		//Validamos que estén libres los registros que queremos grabar
		Boolean hayDatos = false;
		for (int i = anyoDesde; i < anyoHasta + 1; i++) {
			for (int j = mesDesde; j < mesHasta + 1; j++) {
				for (int k = diaDesde; k < diaHasta + 1; k++) {
					for (int l = horaDesde; l < horaHasta + 1; l++) {
						List<Reserva> comprobacion = reservasService.buscarVacios(i, j, k, codAulaSelec, l);
						if (comprobacion.size() != 0) {
							hayDatos = true;
							break;
						}
					}
				}
			}
		}
		
		int diaIni = 0;
		int diaFin = 0;
		if (!hayDatos) {
			//Creamos un bucle para grabar todas los días y horas que se hayan seleccionado
			for (int i = anyoDesde; i < anyoHasta + 1; i++) {
				for (int j = mesDesde; j < mesHasta + 1; j++) {
					if (j == mesDesde && j == mesHasta) {
						diaIni = diaDesde;
						diaFin = diaHasta;
					}
					if (j != mesDesde && j == mesHasta) {
						diaIni = 1;
						diaFin = diaHasta;
					}
					if (j == mesDesde && j != mesHasta) {
						diaIni = diaDesde;
						diaFin = 31;
					}
					if (j != mesDesde && j != mesHasta) {
						diaIni = 1;
						diaFin = 31;
					}
					for (int k = diaIni; k < diaFin + 1; k++) {
						for (int l = horaDesde; l < horaHasta + 1; l++) {
							if (diaSemana(k, j, i) != 7) {
								if ((j == 1 || j == 3 || j == 5 || j == 7 || j == 8 || j == 10 || j == 12) ||
									((j == 4 || j == 6 || j == 9 || j == 11) && (k < 31)) ||	
									(j == 2 && i % 2020 == 0 && k < 30) ||
									(j == 2 && i % 2020 != 0 && k < 29)) {
									reservasService.grabarReserva(new Reserva(0, "", codAulaSelec, i, j, k, l));
								}
							}
						}
					}
				}
			}
			mensaje = "Reserva grabada correctamente";
			if(fechaDesdeTexto.contains(fechaHastaTexto)) {
				return "redirect:/preReservaUnitaria?modo=1&mensaje=" + mensaje + "&sedeSelec=" + sedeSelec;
			} else {
				return "redirect:/preReservaUnitaria?modo=2&mensaje=" + mensaje + "&sedeSelec=" + sedeSelec;
			}
			
		} else {
			mensaje = "La reserva no es posible, AULA ya ocupada en estos horarios y fechas";
			if(fechaDesdeTexto.contains(fechaHastaTexto)) {
				return "redirect:/preReservaUnitaria?modo=0&mensaje=" + mensaje + "&sedeSelec=" + sedeSelec;
			} else {
				return "redirect:/preReservaUnitaria?modo=3&mensaje=" + mensaje + "&sedeSelec=" + sedeSelec;
			}
		}
	}
	
	@GetMapping("/preConsulta")
	public ModelAndView preConsulta(@RequestParam(required = true) int sedeSelec) {
		//Obtenemos el año en el que estamos para ofrecerlo como opción y que no haya que teclearlo
		Calendar c1 = Calendar.getInstance();
		int anyoEnCurso = c1.get(Calendar.YEAR);
		String anyo = Integer.toString(anyoEnCurso);

		//Rellenamos la matriz con los meses
		List<Mes> meses = rellenarMeses();
		int codMes = 1;
		
		//Recuperamos todas las sedes para alimentar el combo para elegirlas
		List<Sede> sedes = sedesService.allSedes();
		int codSede = 0;

		if (sedeSelec < 0) {
			codSede = sedes.get(0).getCod_sede();
		} else {
			codSede = sedeSelec;
		}

		//Obtenemos todas las aulas de la primera sede de la BBDD
		List<Aula> aulas = aulasService.aulasPorSede(codSede); 
		int codAula = aulas.get(0).getCod_aula();
		
		ModelAndView mav = new ModelAndView();

		mav.addObject("anyo", anyo);
		mav.addObject("meses", meses);
		mav.addObject("CodMes", codMes);
		mav.addObject("sedes", sedes);
		mav.addObject("codSede", codSede);
		mav.addObject("aulas", aulas);
		mav.addObject("codAula", codAula);

		mav.setViewName("preConsulta");
		return mav;
	}
	
	@GetMapping("/calendario")
	public ModelAndView calendario(	@RequestParam(required = true) int sedeSelec,
									@RequestParam(required = true) int aulaSelec,
									@RequestParam(required = true) int anoSelec,
									@RequestParam(required = true) int mesSelec) {
		//Recuperamos todas las sedes para alimentar el combo para elegirlas
		List<Sede> sedes = sedesService.allSedes();
		
		//Indicamos cual es la sede elegida
		int codSede = sedeSelec;

		//Obtenemos todas las aulas de la primera sede de la BBDD
		List<Aula> aulas = aulasService.aulasPorSede(codSede); 
		
		//Indicamos cual es el aula elegida
		int codAula = aulaSelec;
		
		//Rellenamos la matriz con los meses
		List<Mes> meses = rellenarMeses();
		int codMes = mesSelec;
		
		//Montamos el mes requerido completo con las marcas de reservadas o no
		int diasMes = 0;
		if (mesSelec == 1 || mesSelec == 3 || mesSelec == 5 || mesSelec == 7 || mesSelec == 8 || mesSelec == 10 || mesSelec == 12) {
			diasMes = 31;
			System.out.println("31");
		} else if (mesSelec == 4 || mesSelec == 6 || mesSelec == 9 || mesSelec == 11) {
			diasMes = 30;
		} else if (anoSelec % 2020 == 0) {
			diasMes = 29;
		} else {
			diasMes = 28;
		}
		
		//Creamos la tabla del mes completo con todas sus horas y la iniciamos a no reservada (false)
		boolean[][] reservado = new boolean[diasMes + 1][14];
		for (int i = 1; i < diasMes + 1; i++) {
			for (int j = 1; j < 14; j++) {
				reservado[i][j] = false;
			}
		}

		//Vamos a buscar las reservas que hay hechas con los datos introducidos
		List<Reserva> reservasHechas = reservasService.reservasHechas(aulaSelec, anoSelec, mesSelec);
		
		//revisamos las reservas recuperadas y actualizamos como true en la tabla del mes
		for (Reserva reserva : reservasHechas) {
			reservado[reserva.getDia()][reserva.getHora() - 8] = true;
		}
			
		//Conseguimos el nombre del mes
		String mesNombre = nombreMes(mesSelec - 1);
		
		ModelAndView mav = new ModelAndView();
		
		mav.addObject("anyo", anoSelec);
		mav.addObject("sedes", sedes);
		mav.addObject("codSede", codSede);
		mav.addObject("aulas", aulas);
		mav.addObject("codAula", codAula);
		mav.addObject("meses", meses);
		mav.addObject("codMes", codMes);
		mav.addObject("diasMes", diasMes);
		mav.addObject("reservado", reservado);
		mav.addObject("mesNombre", mesNombre);
		
		mav.setViewName("calendario");
		return mav;
	}

	int diaSemana (int dia, int mes, int ano)
	   {
	    int diaSem = 0;
	    int nD = 0;
	    Calendar c = Calendar.getInstance();

	    c.set(ano, mes - 1, dia);
	    nD=c.get(Calendar.DAY_OF_WEEK); 
	    System.out.println(nD);
	    switch (nD){
	        case 1: diaSem = 7;
	            break;
	        case 2: diaSem = 1;
	            break;
	        case 3: diaSem = 2;
	            break;
	        case 4: diaSem = 3;
	            break;
	        case 5: diaSem = 4;
	            break;
	        case 6: diaSem = 5;
	            break;
	        case 7: diaSem = 6;
	            break;
	    }

	    return diaSem;
	}
	
	String nombreMes(int month) {
		String result = "";
		
		switch(month){
		  case 0:
		    {
		      result="Enero";
		      break;
		    }
		  case 1:
		    {
		      result="Febrero";
		      break;
		    }
		  case 2:
		    {
		      result="Marzo";
		      break;
		    }
		  case 3:
		    {
		      result="Abril";
		      break;
		    }
		  case 4:
		    {
		      result="Mayo";
		      break;
		    }
		  case 5:
		    {
		      result="Junio";
		      break;
		    }
		  case 6:
		    {
		      result="Julio";
		      break;
		    }
		  case 7:
		    {
		      result="Agosto";
		      break;
		    }
		  case 8:
		    {
		      result="Septiembre";
		      break;
		    }
		  case 9:
		    {
		      result="Octubre";
		      break;
		    }
		  case 10:
		    {
		      result="Noviembre";
		      break;
		    }
		  case 11:
		    {
		      result="Diciembre";
		      break;
		    }
		  default:
		    {
		      result="Error";
		      break;
		    }
		}
		return result;
	}

	List<Mes> rellenarMeses() {
		ArrayList<Mes> meses = new ArrayList<Mes>();
		
		meses.add(new Mes(1, "Enero"));
		meses.add(new Mes(2, "Febrero"));
		meses.add(new Mes(3, "Marzo"));
		meses.add(new Mes(4, "Abril"));
		meses.add(new Mes(5, "Mayo"));
		meses.add(new Mes(6, "Junio"));
		meses.add(new Mes(7, "Julio"));
		meses.add(new Mes(8, "Agosto"));
		meses.add(new Mes(9, "Septiembre"));
		meses.add(new Mes(10, "Octubre"));
		meses.add(new Mes(11, "Noviembre"));
		meses.add(new Mes(12, "Diciembre"));
		
		return meses;
	}
}
